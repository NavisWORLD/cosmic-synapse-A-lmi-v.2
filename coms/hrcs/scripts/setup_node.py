#!/usr/bin/env python3
"""
HRCS Node Setup Wizard
Interactive setup for configuring a new node
"""

import os
import sys
import secrets
from pathlib import Path


def generate_node_id():
    """Generate random 64-bit node ID"""
    return secrets.randbits(64)


def generate_network_key():
    """Generate secure random network key"""
    return secrets.token_urlsafe(32)


def get_input(prompt, default=None, validator=None):
    """Get user input with validation"""
    while True:
        if default:
            full_prompt = f"{prompt} [{default}]: "
        else:
            full_prompt = f"{prompt}: "
        
        value = input(full_prompt).strip()
        if not value and default:
            value = default
        
        if not value:
            print("Please enter a value")
            continue
        
        if validator:
            try:
                validator(value)
            except ValueError as e:
                print(f"Invalid input: {e}")
                continue
        
        return value


def main():
    """Run setup wizard"""
    print("HRCS Node Setup Wizard")
    print("=" * 50)
    print()
    
    # Node ID
    print("Node Configuration:")
    generate_new = get_input("Generate new node ID? (y/n)", default="y")
    
    if generate_new.lower() == 'y':
        node_id = generate_node_id()
        print(f"Generated node ID: 0x{node_id:016X}")
    else:
        node_id_str = get_input("Enter node ID (hex)", validator=lambda x: int(x, 16))
        node_id = int(node_id_str, 16)
    
    # Network key
    print()
    print("Security Configuration:")
    generate_key = get_input("Generate new network key? (y/n)", default="y")
    
    if generate_key.lower() == 'y':
        network_key = generate_network_key()
        print(f"Generated network key: {network_key}")
        print()
        print("⚠️  IMPORTANT: Save this key securely!")
        print("   You must use the same key on all nodes in the network")
    else:
        network_key = get_input("Enter network key")
    
    # Band selection
    print()
    print("Physical Layer Configuration:")
    use_acoustic = get_input("Enable acoustic modem? (y/n)", default="y")
    use_radio = get_input("Enable radio modem (SDR)? (y/n)", default="n")
    
    # Output configuration
    config = f"""# HRCS Node Configuration
# Generated by setup wizard

node:
  id: 0x{node_id:016X}
  name: "Node-{node_id & 0xFFFF:04X}"
  
network:
  network_key: "{network_key}"
  auto_join: true
  mesh_ttl: 10
  
physical:
  acoustic:
    enabled: {use_acoustic.lower() == 'y'}
    sample_rate: 48000
    base_frequency: 432
    channels: 32
    power: 10
  
  radio_vhf:
    enabled: {use_radio.lower() == 'y'}
    center_freq: 146.500e6
    bandwidth: 25e3
    power: 5
  
  radio_uhf:
    enabled: {use_radio.lower() == 'y'}
    center_freq: 433.920e6
    bandwidth: 200e3
    power: 1

routing:
  algorithm: "golden_ratio_dv"
  update_interval: 30
  neighbor_timeout: 120

power:
  solar_enabled: true
  battery_capacity: 100
  low_power_threshold: 20
  emergency_mode_threshold: 10

logging:
  level: "INFO"
  file: "/var/log/hrcs/node.log"
  max_size: 100
"""
    
    # Save configuration
    print()
    save = get_input("Save configuration to config.yaml? (y/n)", default="y")
    
    if save.lower() == 'y':
        config_path = Path("config.yaml")
        config_path.write_text(config)
        print(f"Configuration saved to {config_path}")
    else:
        print("\nConfiguration:")
        print(config)
    
    print()
    print("Setup complete!")
    print("Next steps:")
    print("1. Install dependencies: pip install -r requirements.txt")
    print("2. Start node: python -m hrcs.node")
    print("3. Send message: hrcs send <node_id> 'Hello'")


if __name__ == "__main__":
    main()

